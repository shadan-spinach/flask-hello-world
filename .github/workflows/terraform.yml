name: CI/CD

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      instance_id: ${{ steps.output-instance-id.outputs.instance_id }}
      ecr_uri: ${{ steps.output-ecr-uri.outputs.ecr_uri }}
      db_uri: ${{ steps.get-db-uri.outputs.db_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false

      - name: Install AWS CLI
        run: sudo apt-get install -y awscli

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var="DB_USERNAME=${{ secrets.DB_USERNAME }}" -var="DB_PASSWORD==${{ secrets.DB_PASSWORD }}" -out=tfplan -input=false

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve tfplan

      - name: Output Instance ID
        id: output-instance-id
        run: |
          echo "instance_id=$(terraform output -raw instance_id)" >> $GITHUB_OUTPUT

      - name: Output ECR URI
        id: output-ecr-uri
        run: |
          echo "ecr_uri=$(terraform output -raw repository_url)" >> $GITHUB_OUTPUT
      
      - name: Get DB URI from Terraform
        id: get-db-uri
        run: |
          echo "db_uri=$(terraform output -raw db_uri)" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Echo Environment Variables
        run: |
          echo "ecr_uri=${{ needs.terraform.outputs.ecr_uri }}"

      - name: Login to AWS ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ needs.terraform.outputs.ecr_uri }}

      - name: Build Docker Image
        run: |
          docker build -t flask-app .

      - name: Tag Docker Image
        run: |
          docker tag flask-app:latest ${{ needs.terraform.outputs.ecr_uri }}:latest

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ needs.terraform.outputs.ecr_uri }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [terraform, build-and-push]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Update flask Service
        run: |
          aws ecs update-service \
            --cluster ecs-cluster \
            --service flask-service \
            --force-new-deployment
      
      - name: Update strapi Service
        run: |
          aws ecs update-service \
            --cluster ecs-cluster \
            --service strapi-service \
            --force-new-deployment